#pragma once

#include <SFML/OpenGL.hpp>
#include <SFML/Window.hpp>

#include <array>
#include <chrono>
#include <cmath>
#include <complex>
#include <iostream>
#include <vector>

using namespace std;

using color = array<float, 4>;

class application {
 public:
  // Default constructor and destructor explicitly generated by the compiler.
  // Otherwise, it would be implicitly generated.
  // application() = default;
  ~application() = default;
  // Default constructor written by the programmer.
  application();

  void execute();

 private:
  void draw_gradient();
  void draw_mandelbrot();
  void draw_julia();
  void animate_julia(float dt);
  void compute_viewport();

 private:
  int screen_width = 600;
  int screen_height = 400;
  float origin_x = -0.5;
  float origin_y = 0;
  float height = 2;
  float width = static_cast<float>(screen_width) / screen_height * height;
  float x_min = origin_x - 0.5 * width;
  float y_min = origin_y - 0.5 * height;
  float x_max = origin_x + 0.5 * width;
  float y_max = origin_y + 0.5 * height;
  vector<color> pixel_buffer;

  chrono::time_point<chrono::high_resolution_clock> start_time =
      chrono::high_resolution_clock::now();
  // decltype returns the type of given expression.
  decltype(start_time) old_time = start_time;

  complex<float> julia_coeff{};

  sf::Window window{{screen_width, screen_height},
                    "OpenGL",
                    sf::Style::Default,
                    sf::ContextSettings{32}};

  int old_mouse_x = 0;
  int old_mouse_y = 0;
};